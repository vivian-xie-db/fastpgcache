Metadata-Version: 2.4
Name: fastpgcache
Version: 0.1.0
Summary: A fast Redis-like caching library using PostgreSQL with UNLOGGED tables for high performance
Home-page: https://github.com/vivian-xie-db/fastpgcache
Author: Wenwen Xie
Author-email: Wenwen Xie <wenwen.xie@databricks.com>
License: MIT
Project-URL: Homepage, https://github.com/vivian-xie-db/fastpgcache
Project-URL: Documentation, https://github.com/vivian-xie-db/fastpgcache#readme
Project-URL: Repository, https://github.com/vivian-xie-db/fastpgcache.git
Project-URL: Bug Tracker, https://github.com/vivian-xie-db/fastpgcache/issues
Keywords: postgresql,cache,redis,database,caching,fast,performance
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Database
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: psycopg2-binary>=2.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=3.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Provides-Extra: databricks
Requires-Dist: databricks-sdk>=0.1.0; extra == "databricks"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# FastPgCache 🐘⚡

A **fast Redis-like caching library** for PostgreSQL with high performance using UNLOGGED tables. Get Redis-style caching without the extra infrastructure!

## Why FastPgCache?

- **🚀 Fast** - Uses PostgreSQL UNLOGGED tables for Redis-like performance
- **⏰ TTL Support** - Automatic expiry like Redis SET with EX
- **🔄 Redis-like API** - Familiar methods: `set()`, `get()`, `delete()`, `exists()`, `ttl()`
- **🎯 Simple** - One less service to manage
- **💪 ACID** - Get caching within PostgreSQL transactions
- **📦 JSON Support** - Automatic JSON serialization/deserialization
- **🔐 Token Rotation** - Built-in support for Databricks token authentication


## Quick Start

### Installation

### Basic Installation

```bash
pip install fastpgcache
```

Or from source:

```bash
git clone https://github.com/vivian-xie-db/fastpgcache.git
cd fastpgcache
pip install -e .
```

### With Databricks Support

```bash
pip install fastpgcache[databricks]
```

Or add to your `requirements.txt`:
```
fastpgcache[databricks]>=0.1.0
```

## Databricks Token Authentication

### The Solution: DatabricksTokenProvider

✅ **With Automatic Token Rotation:**
```python
from databricks.sdk import WorkspaceClient
from fastpgcache import FastPgCache, DatabricksTokenProvider
# If you use Databricks notebook or Databricks apps runtime, you don't need to add profile
# w = WorkspaceClient()
w = WorkspaceClient(profile="Oauth")

# Create token provider with automatic rotation
token_provider = DatabricksTokenProvider(
    workspace_client=w,
    instance_names=["my_instance"],
    refresh_interval=3600,  # Refresh every hour
    auto_refresh=True       # Enable background refresh
)

# Cache automatically uses fresh tokens
cache = FastPgCache(
    host="my-instance.database.cloud.databricks.com",
    database="databricks_postgres",
    user="user@databricks.com",
    token_provider=token_provider,  # Automatic token management!
    auto_setup=True
)

# Works forever - tokens automatically refresh!
cache.set("key", "value")
# ... hours later ...
cache.get("key")  # ✅ Still works!
```


## API Reference

### FastPgCache

```python
FastPgCache(
    connection_string=None,
    host='localhost',
    port=5432,
    database='postgres',
    user='postgres',
    password='',
    token_provider=None,
    minconn=1,
    maxconn=10,
    auto_setup=False
)
```

Initialize the cache client.

**Parameters:**
- `connection_string` (str, optional): PostgreSQL connection string
- `host` (str): Database host (default: 'localhost')
- `port` (int): Database port (default: 5432)
- `database` (str): Database name (default: 'postgres')
- `user` (str): Database user (default: 'postgres')
- `password` (str): Database password (ignored if token_provider is set)
- `token_provider` (TokenProvider, optional): Token provider for automatic credential rotation
- `minconn` (int): Minimum connections in pool (default: 1)
- `maxconn` (int): Maximum connections in pool (default: 10)
- `auto_setup` (bool): Automatically run setup() (default: False)

### Methods

#### setup()

Initialize cache tables and functions. Run this once before using the cache.

```python
cache.setup()
```

#### set(key, value, ttl=None)

Store a value in the cache.

**Parameters:**
- `key` (str): Cache key
- `value` (str|dict|list): Value to cache (dicts/lists are auto-serialized to JSON)
- `ttl` (int, optional): Time to live in seconds (None = no expiry)

**Returns:** `bool` - True if successful

```python
cache.set("user:123", {"name": "Alice"}, ttl=3600)
```

#### get(key, parse_json=True)

Retrieve a value from the cache.

**Parameters:**
- `key` (str): Cache key
- `parse_json` (bool): Auto-parse JSON values (default: True)

**Returns:** Value or None if not found/expired

```python
user = cache.get("user:123")
```

#### delete(key)

Delete a cache entry.

**Parameters:**
- `key` (str): Cache key

**Returns:** `bool` - True if deleted, False if not found

```python
cache.delete("user:123")
```

#### exists(key)

Check if a key exists and is not expired.

**Parameters:**
- `key` (str): Cache key

**Returns:** `bool` - True if exists

```python
if cache.exists("user:123"):
    print("Key exists!")
```

#### ttl(key)

Get time to live for a key.

**Parameters:**
- `key` (str): Cache key

**Returns:** `int` - Seconds until expiry, -1 if no expiry, -2 if not found

```python
seconds = cache.ttl("user:123")
```

**TTL Return Values:**
- Positive number: Seconds until expiry
- `-1`: No expiry set (permanent)
- `-2`: Key not found

#### cleanup()

Remove all expired cache entries.

**Returns:** `int` - Number of entries deleted

```python
deleted = cache.cleanup()
```

#### close()

Close all connections in the pool.

```python
cache.close()
```

## Examples

### API Response Caching

```python
from fastpgcache import FastPgCache
import requests

cache = FastPgCache("postgresql://user:pass@localhost/mydb", auto_setup=True)

def get_weather(city):
    cache_key = f"weather:{city}"
    
    # Try cache first
    cached = cache.get(cache_key)
    if cached:
        print("Cache HIT!")
        return cached
    
    # Cache miss - fetch from API
    print("Cache MISS - fetching from API...")
    response = requests.get(f"https://api.weather.com/{city}")
    data = response.json()
    
    # Cache for 5 minutes
    cache.set(cache_key, data, ttl=300)
    return data

# First call - fetches from API
weather = get_weather("NYC")

# Second call - instant from cache!
weather = get_weather("NYC")

cache.close()
```

### Session Management

```python
cache.set(f"session:{session_id}", user_data, ttl=1800)  # 30 min
```

### Database Query Caching

```python
cache.set(f"query:{query_hash}", results, ttl=3600)  # 1 hour
```

### Rate Limiting

```python
count = cache.get(f"ratelimit:{user_id}") or 0
if count < 100:
    cache.set(f"ratelimit:{user_id}", count + 1, ttl=3600)
```


### Scheduled Cleanup with Cron

```python
# cleanup_cron.py
from fastpgcache import FastPgCache

cache = FastPgCache("postgresql://user:pass@localhost/mydb")
deleted = cache.cleanup()
print(f"Cleaned up {deleted} expired entries")
cache.close()
```

Then schedule with crontab:
```bash
# Run cleanup every 5 minutes
*/5 * * * * /usr/bin/python /path/to/cleanup_cron.py
```

## Performance Tips

1. **Connection Pooling** - Automatically handled with configurable pool size
2. **Batch Operations** - Use transactions for multiple operations
3. **Regular Cleanup** - Schedule `cache.cleanup()` periodically
4. **UNLOGGED Tables** - Already configured for maximum write speed

## Important Notes

- **UNLOGGED Tables** - Data is not crash-safe (lost on database crash). For durability, modify the setup SQL to remove `UNLOGGED`.
- **First Setup** - Run `cache.setup()` once to create tables and functions
- **Cleanup** - Schedule `cache.cleanup()` to remove expired entries (they're auto-removed on access, but cleanup helps with storage)


**psycopg2 not found:**
```bash
pip install psycopg2-binary
```

### Databricks Token Issues

**Token Refresh Failing:**

1. **Workspace Client Configuration:**
   ```python
   # Ensure valid authentication. If you use Databricks notebook or Databricks apps runtime, you don't 
   # need to add profile
   # w = WorkspaceClient()
   w = WorkspaceClient(profile="Oauth")
   # Test credential generation
   cred = w.database.generate_database_credential(
       request_id=str(uuid.uuid4()),
       instance_names=["my_instance"]
   )
   print(f"Token generated: {cred.token[:20]}...")
   ```

2. **Instance Names:**
   ```python
   # Ensure instance name is correct
   token_provider = DatabricksTokenProvider(
       workspace_client=w,
       instance_names=["correct_instance_name"],  # Must match exactly
       ...
   )
   ```

3. **Network Connectivity:**
   - Ensure connection to Databricks workspace
   - Check firewall/proxy settings

**Connection Errors After Token Refresh:**

- Make sure refresh happens before expiry (adjust `refresh_interval`)
- Keep connection pool size reasonable (lower = faster refresh)

## Requirements

- Python 3.7+
- PostgreSQL 9.6+
- psycopg2-binary

## License

MIT License - see LICENSE file for details

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Support

For issues and questions, please open an issue on GitHub: https://github.com/vivian-xie-db/fastpgcache/issues

## Additional Resources

- [Databricks SDK Documentation](https://databricks-sdk-py.readthedocs.io/)
- [PostgreSQL Authentication](https://www.postgresql.org/docs/current/auth-password.html)
- [Examples Directory](examples/)

